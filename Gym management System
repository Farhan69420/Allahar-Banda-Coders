#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
#include<math.h>

struct Member
{
    char Name[50], BloodGroup[5], Address[100], Contact[15];
    int ID;
    float MembershipPeriod;
};

struct Staff
{
    char Name[50], Address[100], Contact[15];
    int ID;
    int Salary;
};
struct Trainer
{
    char Name[50], Address[100], Contact[15];
    int ID;
    int Salary;
};

struct Product
{
    char Name[50];
    int Quantity;
    float Price;
};
void print_deadline(int months);
float calculateBMI(float, float);
void fitnessProgramme(float);
void dietPlan(float);
void generateFiles(struct Member, struct Staff, struct Trainer);
float totalRevenue(struct Product[]);
void SalesReport(struct Product[], struct Member[]);
void MemberFiles(struct Member member);
void StaffFiles(struct Staff staff);
void TrainerFiles(struct Trainer trainer);
int main()
{
    struct Member members[100];
    struct Staff staff[100];
    struct Trainer trainer[100];
    struct Product products[100];
    int i, n, m, t, p,height,weight;
    float BMI, revenue;
    printf("************Welcome to the Gym Management Sysytem************\n");
    printf("\n");
    printf("Enter the number of members: ");
    scanf("%d", &n);
     for (i = 0; i < n; i++)
    {
        printf("\nEnter details for Member %d: \n", i + 1);
        printf("Name: ");
        scanf("%s", &members[i].Name);
        printf("ID: ");
        scanf("%d", &members[i].ID);
        printf("Blood Group: ");
        scanf("%s", &members[i].BloodGroup);
        printf("Address: ");
        scanf("%s", &members[i].Address);
        printf("Contact: ");
        scanf("%s", &members[i].Contact);
        printf("Membership Period(in months): ");
        scanf("%f", &members[i].MembershipPeriod);
        float height, weight;
        printf("Height(in meters): ");
        scanf("%f", &height);
        printf("Weight(in kilograms): ");
        scanf("%f", &weight);
        BMI = calculateBMI(height, weight);
        printf("BMI: %f\n",BMI);
        fitnessProgramme(BMI);
        dietPlan(BMI);
        print_deadline(members[i].MembershipPeriod);
        printf("\n");
    }
       printf("\nEnter the number of staff: ");
       scanf("%d", &m);
    for (i = 0; i < m; i++)
    {
        printf("\nEnter details for Staff %d: \n", i + 1);
        printf("Name: ");
        scanf("%s", &staff[i].Name);
        printf("ID: ");
        scanf("%d", &staff[i].ID);
        printf("Address: ");
        scanf("%s", &staff[i].Address);
        printf("Contact: ");
        scanf("%s", &staff[i].Contact);
        printf("Salary(in dollars): ");
        scanf("%d", &staff[i].Salary);
        printf("\n");
    }

    printf("\nEnter the number of trainer: ");
    scanf("%d", &t);
    for (i = 0; i < t; i++)
    {
        printf("\nEnter details for Trainer %d: \n", i + 1);
        printf("Name: ");
        scanf("%s", &trainer[i].Name);
        printf("ID: ");
        scanf("%d", &trainer[i].ID);
        printf("Address: ");
        scanf("%s", &trainer[i].Address);
        printf("Contact: ");
        scanf("%s", &trainer[i].Contact);
        printf("Salary(in dollars): ");
        scanf("%d", &trainer[i].Salary);
        printf("\n");
    }
 for (i = 0; i < n; i++)
    {
        MemberFiles(members[i]);
    }
    for (i = 0; i < m; i++)
    {
        StaffFiles(staff[i]);
    }
    for (i = 0; i < t; i++)
    {
        TrainerFiles(trainer[i]);
    }

    printf("\nEnter the number of products: ");
    scanf("%d", &p);
    for (i = 0; i < p; i++)
    {
        printf("\nEnter details for Product %d: \n", i + 1);
        printf("Name: ");
        scanf("%s", &products[i].Name);
        printf("Quantity: ");
        scanf("%d", &products[i].Quantity);
        printf("Price: ");
        scanf("%f", &products[i].Price);
        printf("\n");
    }
revenue = totalRevenue(products);
    printf("\nTotal revenue generated: %.2f\n", revenue);

    SalesReport(products, members);

    return 0;
}

float calculateBMI(float height, float weight)
{
    float BMI;
    BMI = (weight) / (height * height);
    return BMI;
}

void fitnessProgramme(float BMI)
{
    if (BMI < 18.5)
    {
        printf("Fitness Programme: Low intensity aerobic exercise, strength training\n");
    }
    else if (BMI >= 18.5 && BMI <= 24.9)
    {
        printf("Fitness Programme: Moderate intensity aerobic exercise, strength training\n");
    }
    else if (BMI > 24.9)
    {
        printf("Fitness Programme: High intensity aerobic exercise, strength training\n");
    }
}
void dietPlan(float BMI)
{
    if (BMI < 18.5)
    {
        printf("Diet Plan: Increase calorie intake, protein-rich foods\n");
    }
    else if (BMI >= 18.5 && BMI <= 24.9)
    {
        printf("Diet Plan: Balanced diet with adequate protein and vitamins\n");
    }
    else if (BMI > 24.9)
    {
        printf("Diet Plan: Low calorie and low fat diet\n");
    }
}

void MemberFiles(struct Member member)
{
    char filename[100]="Members";
    strcat(filename, ".txt");
    FILE *fp;
    fp = fopen(filename, "w");
     if (fp == NULL)
    {
        printf("Error opening the file\n");
    }
    else{
    fprintf(fp, "Member Details\n");
    fprintf(fp, "Name: %s\n", member.Name);
    fprintf(fp, "ID: %d\n", member.ID);
    fprintf(fp, "Blood Group: %s\n", member.BloodGroup);
    fprintf(fp, "Address: %s\n", member.Address);
    fprintf(fp, "Contact: %s\n", member.Contact);
    fprintf(fp, "Membership Period: %.2f\n", member.MembershipPeriod);
    fclose(fp);
}
}

void StaffFiles(struct Staff staff)
{
    char filename[100]="Staff";
    strcat(filename, ".txt");
    FILE *fp;
    fp = fopen(filename, "w");
    if (fp == NULL)
    {
        printf("Error opening the file\n");
    }
    else{
    fprintf(fp, "\nStaff Details\n");
    fprintf(fp, "Name: %s\n", staff.Name);
    fprintf(fp, "ID: %d\n", staff.ID);
    fprintf(fp, "Address: %s\n", staff.Address);
    fprintf(fp, "Contact: %s\n", staff.Contact);
    fprintf(fp, "Salary: %d\n", staff.Salary);
    fclose(fp);
}
}
void TrainerFiles(struct Trainer trainer)
{
    char filename[100]="Trainers";
    strcat(filename, ".txt");
    FILE *fp;
    fp = fopen(filename, "w");
    if (fp == NULL)
    {
        printf("Error opening the file\n");
    }
    else{
    fprintf(fp, "\nTrainer Details\n");
    fprintf(fp, "Name: %s\n", trainer.Name);
    fprintf(fp, "ID: %d\n", trainer.ID);
    fprintf(fp, "Address: %s\n", trainer.Address);
    fprintf(fp, "Contact: %s\n", trainer.Contact);
    fprintf(fp, "Salary: %d\n", trainer.Salary);
    fclose(fp);
}
}
float totalRevenue(struct Product products[])
{
int i;
float revenue = 0.0;
for (i = 0; strlen(products[i].Name) != 0; i++)
{
revenue += (products[i].Quantity * products[i].Price);
}
return revenue;
}
void print_deadline(int months){
time_t t = time(NULL);
struct tm *deadline = localtime(&t);
deadline->tm_mon += months;
mktime(deadline);
printf("Deadline of membership: %02d/%02d/%04d\n",
deadline->tm_mday, deadline->tm_mon+1, deadline->tm_year+1900);
}


void SalesReport(struct Product products[], struct Member members[])
{
    int i;
    float revenue = 0.0;
    FILE *fp;
    fp = fopen("SalesReport.txt", "w");
    fprintf(fp, "Sales Report\n");
    fprintf(fp, "\nProducts Sold\n");
    for (i = 0; products[i].Name != '\0'; i++)
    {
        fprintf(fp, "Name: %s\n", products[i].Name);
        fprintf(fp, "Quantity Sold: %d\n", products[i].Quantity);
        fprintf(fp, "Price: %.2f\n\n", products[i].Price);
        revenue += (products[i].Quantity * products[i].Price);
    }
    fprintf(fp, "Total Revenue Generated from Products: %.2f\n", revenue);
    fclose(fp);
}




